# ************************************************************************************************
# ************************************************************************************************
#
#		Name:		build.py
#		Purpose:	Construct a library and link file 
#		Created:	11th April 2023
#		Reviewed: 	No
#		Author:		Paul Robson (paul@robsons.org.uk)
#
# ************************************************************************************************
# ************************************************************************************************

import os,re,sys

def generateLabel(rom,identifier):
	return "ROM{0}_{1}".format(rom,generateName(identifier))
def generateName(identifier):
	return identifier.replace(".","_").lower().strip()

rom = 0
for s in sys.argv[1:]:																# Process command line options
	if s.startswith("-rom"):  														# which ROM does this go in ?		
		rom = int(s[4:])

sourceFiles = []
includeFiles = []
newExterns = {}

for s in [x for x in sys.argv[1:] if not x.startswith("-")]:
	for root,dirs,files in os.walk(s):
		for f in files:
			if f.endswith(".inc") or f.endswith(".asm"):	
				fName = root + os.sep + f 
				if fName.find("__") < 0:
					if fName.endswith(".asm"):
						sourceFiles.append(fName)
					if fName.endswith(".inc"):
						includeFiles.append(fName)

for f in sourceFiles:																	# look for all externs in source files.
	for s in [x.rstrip() for x in open(f).readlines()]:
		if s.startswith("extern"):														# get extern definitions.
			function = generateName(s[6:])
			newLabel = generateLabel(rom,s[6:])
			assert function not in newExterns,"Duplicate "+function
			newExterns[function] = { "function":function,"label":newLabel,"rom":rom }

sourceFiles.sort()
includeFiles.sort()

h = open("build"+os.sep+"library.code","w")
h.write(";\n;\tThis file is automatically generated\n;\n")
for f in includeFiles+sourceFiles:
	for s in [x.rstrip() for x in open(f).readlines()]:
		if s.startswith("extern"):												
			function = generateName(s[6:])
			h.write("{0:32} ; ***** {1}() *****\n".format(newExterns[function]["label"]+":",s[6:].strip().lower()))
		elif s.find("()") >= 0:
			s = (s if s.find(";") < 0 else s[:s.find(";")]).strip().lower().replace("()","")
			function = generateName(s)
			assert function in newExterns,"Unknown function {0}()".format(s)
			h.write("\t\tjsr\t{0} ; {1}()\n".format(newExterns[function]["label"],s))
		else:
			h.write(s+"\n")
h.close()

h = open("build"+os.sep+"library.link","w")
h.close()

# ************************************************************************************************
#
#									Changes and Updates
#
# ************************************************************************************************
#
#		Date			Notes
#		==== 			=====
#
# ************************************************************************************************
